IDC센터 - 서버들을 모아놓는 센터?

프로토콜 : 네크워크상에서 약속한 통신규약	http[프로토콜]://ww.dsadasfasf.kr[DNS를 통한 ip주소를 변경]:80[port(생략가능)]/kr/index[information path]
	HTTP : 기본이라 안써줘도 된다.
	FTP - 파일을 주고 받는 통신규약
	SMTP - 메일을 주고 받는..?
	POP - POP3 다른 곳에서 메일을 받아 올 때
	DHCP - 동적 프로토콜 ( 아이피를 정해두고?? 접속시 아이피를 준다 , 유지보수에 용이)

IP : 네트워크상에서 ((컴퓨터)) 식별 주소 
DNS : IP주소를 인간이 쉽게 외우도로 맵핑한 문자열 (도메인)
Port : 해당 컴퓨터의 구동되고 있는 ((프로그램))을 구분할 수 있도록 : 기본이라 안써줘도 된다.


웹서버  )	1. 하드웨어 웹서버	2. 소프트웨어 웹서버
		- 불법 아이피 차단
		- 정적파일만 처리/ 동적파일은 웹 어플리케이션(WAS)으로 넘겨주고 처리되면 받는다.
		- 톰캣, IIS
	 	
웹 어플리케이션 서버 (WAS서버)(유료)  - 동적인 기능 처리
					 	    - DB커넥션 풀
					 		- 웹서버, 컨테이너 기능을 다 한다. 
					  		- 톰캣으로 가능하나 WAS기능의 일부만 가지고 있다
					  
(톰캣은 WAS의 기능을 다 가지고 있지 않아서 컨테이너라고 부른다.)					  
컨테이너 )	1. 서블릿 컨테이너	JSP컨테이너
		- JSP를 서블릿으로 변환
		- 서블릿의 생명주기 관리
		
		HTML <-> JSP 변환해줌
	 	

** 웹 프로그램의 동장 

	웹 페이지 - (request) - 웹서버 - 웹어플리케이션 - 데이터 베이스 -
	
	데이터 베이스 - 웹 어플리케이션 - 웹서버 - (response) - 웹페이지
	
	
	
--------------------
MVC패턴 
Model
View (JSP) - (확장자 명 .jsp)
Controller(servlet) - 자바 (확장자 명 .java)
	
	
**	jsp  (view단을 책임진다)
		- 확장자 명 ( .jsp)
		- 동적 어플리케이션 컴포넌트 (가공을해서 전달할 수 있나.) <-> html은 정보 전달만 하니까 정적이다.
		- 클라이언트의 요청에 동적으로 작동하고, 응답은 html을 이용
		- jsp는 서블릿으로 변환되어 실행 (jsp -> java -> class -> html으로 리턴)
		- mvc패턴에서 view로 이용됨 
		
		
mappingg하는 2가지 방법 
1. web.xml
2. servlet 파일에서 어노테이션으로

사용하는 이유: 주소가 너무 길고, 보안을 위해서

프로젝트 파일 명 : context? path

web.xml------

<display-name>jsp_0401_01</display-name> ------이 파일이 실행되면
  <welcome-file-list> -----------이 페이지로 들어오면 제일 먼저 어떤 파일을 보여줄거야
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
  
  
  -----servlet파일
  extends HttpServlet -> HttpServlet 상속을 받아서 request, response를 가져옴
  
  
  한글이 깨진다. 인코딩을 해줘여 한다.
 (get방식)
  request.setCharacterEncoding("utf-8");
  
  (post방식)
  server폴더 server.xml에
  Connector에다가  URIEncoding="utf-8" 속성추가
  
  
  --6강
 클라이언트에서 servlet요청이 들어오면 서버에서는  servlet컨테이너를 만들고 요청이 있을 때마다 스레드가 생성된다.
 
 
  servlet 라이프 사이클( 생명주기 )
  Servlet 객체 생성(최초한번) - java, class없으면 자동 생성
  init() 호출 - 구동하자마자 실행되야 할 명령어들은 여기에 적는다.
  service(),doGet(), doPost() 호출  -> 요청시 매번
  destroy()호출 - 마지막 한번 - 마지막에 실행되어야할 명령어들은 여기에 적는다.
  
  
  선처리 @PostConstruct - init보다 먼저 실행
 후처리 @PreDestroy
 
 
 
 ---7강
 
 servlet파일
 
 getParameter(name)
 getParameterValues(name) -> 복수 : 체크박스만
 getParameterName(name)
 
 